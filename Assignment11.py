import binascii

def calcRedundantBits(m):
	for i in range(m):
		if(2**i >= m + i + 1):
			return i


def posRedundantBits(data, r):
	j = 0
	k = 1
	m = len(data)
	res = ''

	for i in range(1, m + r+1):
		if(i == 2**j):
			res = res + '0'
			j += 1
		else:
			res = res + data[-1 * k]
			k += 1
	return res[::-1]


def calcParityBits(arr, r):
	n = len(arr)
	for i in range(r):
		val = 0
		for j in range(1, n + 1):
			if(j & (2**i) == (2**i)):
				val = val ^ int(arr[-1 * j])
		arr = arr[:n-(2**i)] + str(val) + arr[n-(2**i)+1:]
	return arr

def detectError(arr, nr):
	n = len(arr)
	res = 0
	for i in range(nr):
		val = 0
		for j in range(1, n + 1):
			if(j & (2**i) == (2**i)):
				val = val ^ int(arr[-1 * j])
		res = res + val*(10**i)
	return int(str(res), 2)

string = "Praise the Lord for His mercy and truth. O praise the Lord, all ye nations: praise him, all ye people. For his merciful kindness is great toward us: and the atruth of the Lord endureth for ever. Praise ye the Lord."
a_bytes = bytes(string, "ascii")
data=(' '.join(["{0:b}".format(x) for x in a_bytes]))
data = data.replace(" ", "")
print(data)

m = len(data)
r = calcRedundantBits(m)

arr = posRedundantBits(data, r)

arr = calcParityBits(arr, r)

print("Data transferred is " + arr)
arr
print("Error Data is " + arr)
correction = detectError(arr, r)
print("The position of error is " + str(correction))


def BinaryToDecimal(binary):
	# Using int function to convert to
	# string
	string = int(binary, 2)

	return string

str_data =' '
for i in range(0, len(str(correction)), 7):
	temp_data = str(correction)[i:i + 7]
	decimal_data = BinaryToDecimal(temp_data)
	str_data = str_data + chr(decimal_data)

print("fixed: " + str_data)
